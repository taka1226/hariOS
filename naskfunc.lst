     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除
     5                                  ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述 ; NASMではエラーが出るのでこの行削除
     6                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     7                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
     8                                  
     9                                  		; 以下、アンダーバー付き関数名からアンダーバー除いた関数名に修正する
    10                                  		; _io_hlt →　io_hlt など
    11                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
    12                                  		GLOBAL	io_in8,  io_in16,  io_in32
    13                                  		GLOBAL	io_out8, io_out16, io_out32
    14                                  		GLOBAL	io_load_eflags, io_store_eflags
    15                                  		GLOBAL	load_gdtr, load_idtr
    16                                  		GLOBAL	asm_inthandler21, asm_inthandler27, asm_inthandler2c
    17                                  		GLOBAL  store_cr0, load_cr0
    18                                  		GLOBAL  memtest_sub
    19                                  		EXTERN	inthandler21, inthandler27, inthandler2c
    20                                  
    21                                  [SECTION .text]
    22                                  
    23                                  io_hlt:	; void io_hlt(void);
    24 00000000 F4                      		HLT
    25 00000001 C3                      		RET
    26                                  
    27                                  io_cli:	; void io_cli(void);
    28 00000002 FA                      		CLI
    29 00000003 C3                      		RET
    30                                  
    31                                  io_sti:	; void io_sti(void);
    32 00000004 FB                      		STI
    33 00000005 C3                      		RET
    34                                  
    35                                  io_stihlt:	; void io_stihlt(void);
    36 00000006 FB                      		STI
    37 00000007 F4                      		HLT
    38 00000008 C3                      		RET
    39                                  
    40                                  io_in8:	; int io_in8(int port);
    41 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    42 0000000D B800000000              		MOV		EAX,0
    43 00000012 EC                      		IN		AL,DX
    44 00000013 C3                      		RET
    45                                  
    46                                  io_in16:	; int io_in16(int port);
    47 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    48 00000018 B800000000              		MOV		EAX,0
    49 0000001D 66ED                    		IN		AX,DX
    50 0000001F C3                      		RET
    51                                  
    52                                  io_in32:	; int io_in32(int port);
    53 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    54 00000024 ED                      		IN		EAX,DX
    55 00000025 C3                      		RET
    56                                  
    57                                  io_out8:	; void io_out8(int port, int data);
    58 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    59 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    60 0000002E EE                      		OUT		DX,AL
    61 0000002F C3                      		RET
    62                                  
    63                                  io_out16:	; void io_out16(int port, int data);
    64 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    65 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    66 00000038 66EF                    		OUT		DX,AX
    67 0000003A C3                      		RET
    68                                  
    69                                  io_out32:	; void io_out32(int port, int data);
    70 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    71 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    72 00000043 EF                      		OUT		DX,EAX
    73 00000044 C3                      		RET
    74                                  
    75                                  io_load_eflags:	; int io_load_eflags(void);
    76 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    77 00000046 58                      		POP		EAX
    78 00000047 C3                      		RET
    79                                  
    80                                  io_store_eflags:	; void io_store_eflags(int eflags);
    81 00000048 8B442404                		MOV		EAX,[ESP+4]
    82 0000004C 50                      		PUSH	EAX
    83 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    84 0000004E C3                      		RET
    85                                  
    86                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    87 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    88 00000054 6689442406              		MOV		[ESP+6],AX
    89 00000059 0F01542406              		LGDT	[ESP+6]
    90 0000005E C3                      		RET
    91                                  
    92                                  load_idtr:		; void load_idtr(int limit, int addr);
    93 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    94 00000064 6689442406              		MOV		[ESP+6],AX
    95 00000069 0F015C2406              		LIDT	[ESP+6]
    96 0000006E C3                      		RET
    97                                  
    98                                  asm_inthandler21:
    99 0000006F 06                      		PUSH	ES
   100 00000070 1E                      		PUSH	DS
   101 00000071 60                      		PUSHAD
   102 00000072 89E0                    		MOV		EAX,ESP
   103 00000074 50                      		PUSH	EAX
   104 00000075 668CD0                  		MOV		AX,SS
   105 00000078 8ED8                    		MOV		DS,AX
   106 0000007A 8EC0                    		MOV		ES,AX
   107 0000007C E8(00000000)            		CALL	inthandler21
   108 00000081 58                      		POP		EAX
   109 00000082 61                      		POPAD
   110 00000083 1F                      		POP		DS
   111 00000084 07                      		POP		ES
   112 00000085 CF                      		IRETD
   113                                  
   114                                  asm_inthandler27:
   115 00000086 06                      		PUSH	ES
   116 00000087 1E                      		PUSH	DS
   117 00000088 60                      		PUSHAD
   118 00000089 89E0                    		MOV		EAX,ESP
   119 0000008B 50                      		PUSH	EAX
   120 0000008C 668CD0                  		MOV		AX,SS
   121 0000008F 8ED8                    		MOV		DS,AX
   122 00000091 8EC0                    		MOV		ES,AX
   123 00000093 E8(00000000)            		CALL	inthandler27
   124 00000098 58                      		POP		EAX
   125 00000099 61                      		POPAD
   126 0000009A 1F                      		POP		DS
   127 0000009B 07                      		POP		ES
   128 0000009C CF                      		IRETD
   129                                  
   130                                  asm_inthandler2c:
   131 0000009D 06                      		PUSH	ES
   132 0000009E 1E                      		PUSH	DS
   133 0000009F 60                      		PUSHAD
   134 000000A0 89E0                    		MOV		EAX,ESP
   135 000000A2 50                      		PUSH	EAX
   136 000000A3 668CD0                  		MOV		AX,SS
   137 000000A6 8ED8                    		MOV		DS,AX
   138 000000A8 8EC0                    		MOV		ES,AX
   139 000000AA E8(00000000)            		CALL	inthandler2c
   140 000000AF 58                      		POP		EAX
   141 000000B0 61                      		POPAD
   142 000000B1 1F                      		POP		DS
   143 000000B2 07                      		POP		ES
   144 000000B3 CF                      		IRETD
   145                                  
   146                                  store_cr0:		; void store_cr0(int cr0);
   147 000000B4 8B442404                		MOV		EAX,[ESP+4]
   148 000000B8 0F22C0                  		MOV		CR0,EAX
   149 000000BB C3                      		RET
   150                                  
   151                                  load_cr0:		; int load_cr0(void);
   152 000000BC 0F20C0                  		MOV		EAX,CR0
   153 000000BF C3                      		RET
   154                                  
   155                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   156 000000C0 57                      		PUSH	EDI
   157 000000C1 56                      		PUSH	ESI
   158 000000C2 53                      		PUSH	EBX
   159 000000C3 BE55AA55AA              		MOV		ESI,0xaa55aa55
   160 000000C8 BFAA55AA55              		MOV		EDI,0x55aa55aa
   161 000000CD 8B442410                		MOV		EAX,[ESP+12+4]
   162                                  
   163                                  mts_loop:
   164 000000D1 89C3                    		MOV		EBX,EAX
   165 000000D3 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   166 000000D9 8B13                    		MOV		EDX,[EBX]				; old = *p;
   167 000000DB 8933                    		MOV		[EBX],ESI				; *p = pat0;
   168 000000DD 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   169 000000E0 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   170 000000E2 7518                    		JNE		mts_fin
   171 000000E4 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   172 000000E7 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   173 000000E9 7511                    		JNE		mts_fin
   174 000000EB 8913                    		MOV		[EBX],EDX				; *p = old;
   175 000000ED 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   176 000000F2 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   177 000000F6 76D9                    		JBE		mts_loop
   178 000000F8 5B                      		POP		EBX
   179 000000F9 5E                      		POP		ESI
   180 000000FA 5F                      		POP		EDI
   181 000000FB C3                      		RET
   182                                  mts_fin:
   183 000000FC 8913                    		MOV		[EBX],EDX				; *p = old;
   184 000000FE 5B                      		POP		EBX
   185 000000FF 5E                      		POP		ESI
   186 00000100 5F                      		POP		EDI
   187 00000101 C3                      		RET
