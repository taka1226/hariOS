     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除	
     5                                  ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述 ; NASMではエラーが出るのでこの行削除
     6                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     7                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
     8                                  
     9                                  		; 以下、アンダーバー付き関数名からアンダーバー除いた関数名に修正する
    10                                  		; _io_hlt →　io_hlt など
    11                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
    12                                  		GLOBAL	io_in8,  io_in16,  io_in32
    13                                  		GLOBAL	io_out8, io_out16, io_out32
    14                                  		GLOBAL	io_load_eflags, io_store_eflags
    15                                  		GLOBAL	load_gdtr, load_idtr
    16                                  		GLOBAL	asm_inthandler21, asm_inthandler27, asm_inthandler2c
    17                                  		EXTERN	inthandler21, inthandler27, inthandler2c
    18                                  
    19                                  [SECTION .text]
    20                                  
    21                                  io_hlt:	; void io_hlt(void);
    22 00000000 F4                      		HLT
    23 00000001 C3                      		RET
    24                                  
    25                                  io_cli:	; void io_cli(void);
    26 00000002 FA                      		CLI
    27 00000003 C3                      		RET
    28                                  
    29                                  io_sti:	; void io_sti(void);
    30 00000004 FB                      		STI
    31 00000005 C3                      		RET
    32                                  
    33                                  io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                      		STI
    35 00000007 F4                      		HLT
    36 00000008 C3                      		RET
    37                                  
    38                                  io_in8:	; int io_in8(int port);
    39 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    40 0000000D B800000000              		MOV		EAX,0
    41 00000012 EC                      		IN		AL,DX
    42 00000013 C3                      		RET
    43                                  
    44                                  io_in16:	; int io_in16(int port);
    45 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    46 00000018 B800000000              		MOV		EAX,0
    47 0000001D 66ED                    		IN		AX,DX
    48 0000001F C3                      		RET
    49                                  
    50                                  io_in32:	; int io_in32(int port);
    51 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                      		IN		EAX,DX
    53 00000025 C3                      		RET
    54                                  
    55                                  io_out8:	; void io_out8(int port, int data);
    56 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    58 0000002E EE                      		OUT		DX,AL
    59 0000002F C3                      		RET
    60                                  
    61                                  io_out16:	; void io_out16(int port, int data);
    62 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    63 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    64 00000038 66EF                    		OUT		DX,AX
    65 0000003A C3                      		RET
    66                                  
    67                                  io_out32:	; void io_out32(int port, int data);
    68 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    69 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    70 00000043 EF                      		OUT		DX,EAX
    71 00000044 C3                      		RET
    72                                  
    73                                  io_load_eflags:	; int io_load_eflags(void);
    74 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    75 00000046 58                      		POP		EAX
    76 00000047 C3                      		RET
    77                                  
    78                                  io_store_eflags:	; void io_store_eflags(int eflags);
    79 00000048 8B442404                		MOV		EAX,[ESP+4]
    80 0000004C 50                      		PUSH	EAX
    81 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    82 0000004E C3                      		RET
    83                                  
    84                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    85 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    86 00000054 6689442406              		MOV		[ESP+6],AX
    87 00000059 0F01542406              		LGDT	[ESP+6]
    88 0000005E C3                      		RET
    89                                  
    90                                  load_idtr:		; void load_idtr(int limit, int addr);
    91 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    92 00000064 6689442406              		MOV		[ESP+6],AX
    93 00000069 0F015C2406              		LIDT	[ESP+6]
    94 0000006E C3                      		RET
    95                                  
    96                                  asm_inthandler21:
    97 0000006F 06                      		PUSH	ES
    98 00000070 1E                      		PUSH	DS
    99 00000071 60                      		PUSHAD
   100 00000072 89E0                    		MOV		EAX,ESP
   101 00000074 50                      		PUSH	EAX
   102 00000075 668CD0                  		MOV		AX,SS
   103 00000078 8ED8                    		MOV		DS,AX
   104 0000007A 8EC0                    		MOV		ES,AX
   105 0000007C E8(00000000)            		CALL	inthandler21
   106 00000081 58                      		POP		EAX
   107 00000082 61                      		POPAD
   108 00000083 1F                      		POP		DS
   109 00000084 07                      		POP		ES
   110 00000085 CF                      		IRETD
   111                                  
   112                                  asm_inthandler27:
   113 00000086 06                      		PUSH	ES
   114 00000087 1E                      		PUSH	DS
   115 00000088 60                      		PUSHAD
   116 00000089 89E0                    		MOV		EAX,ESP
   117 0000008B 50                      		PUSH	EAX
   118 0000008C 668CD0                  		MOV		AX,SS
   119 0000008F 8ED8                    		MOV		DS,AX
   120 00000091 8EC0                    		MOV		ES,AX
   121 00000093 E8(00000000)            		CALL	inthandler27
   122 00000098 58                      		POP		EAX
   123 00000099 61                      		POPAD
   124 0000009A 1F                      		POP		DS
   125 0000009B 07                      		POP		ES
   126 0000009C CF                      		IRETD
   127                                  
   128                                  asm_inthandler2c:
   129 0000009D 06                      		PUSH	ES
   130 0000009E 1E                      		PUSH	DS
   131 0000009F 60                      		PUSHAD
   132 000000A0 89E0                    		MOV		EAX,ESP
   133 000000A2 50                      		PUSH	EAX
   134 000000A3 668CD0                  		MOV		AX,SS
   135 000000A6 8ED8                    		MOV		DS,AX
   136 000000A8 8EC0                    		MOV		ES,AX
   137 000000AA E8(00000000)            		CALL	inthandler2c
   138 000000AF 58                      		POP		EAX
   139 000000B0 61                      		POPAD
   140 000000B1 1F                      		POP		DS
   141 000000B2 07                      		POP		ES
   142 000000B3 CF                      		IRETD
